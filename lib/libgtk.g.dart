// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// https://github.com/canonical/ubuntu-desktop-installer/issues/670
class LibGtk {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibGtk(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibGtk.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<_GApplication> g_application_get_default() {
    return _g_application_get_default();
  }

  late final _g_application_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<_GApplication> Function()>>(
          'g_application_get_default');
  late final _g_application_get_default = _g_application_get_defaultPtr
      .asFunction<ffi.Pointer<_GApplication> Function()>();

  ffi.Pointer<_GtkWindow> gtk_application_get_active_window(
    ffi.Pointer<_GtkApplication> application,
  ) {
    return _gtk_application_get_active_window(
      application,
    );
  }

  late final _gtk_application_get_active_windowPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<_GtkWindow> Function(ffi.Pointer<_GtkApplication>)>>(
      'gtk_application_get_active_window');
  late final _gtk_application_get_active_window =
      _gtk_application_get_active_windowPtr.asFunction<
          ffi.Pointer<_GtkWindow> Function(ffi.Pointer<_GtkApplication>)>();

  ffi.Pointer<_GtkWidget> gtk_window_get_titlebar(
    ffi.Pointer<_GtkWindow> window,
  ) {
    return _gtk_window_get_titlebar(
      window,
    );
  }

  late final _gtk_window_get_titlebarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_GtkWidget> Function(
              ffi.Pointer<_GtkWindow>)>>('gtk_window_get_titlebar');
  late final _gtk_window_get_titlebar = _gtk_window_get_titlebarPtr
      .asFunction<ffi.Pointer<_GtkWidget> Function(ffi.Pointer<_GtkWindow>)>();

  void gtk_header_bar_set_title(
    ffi.Pointer<_GtkHeaderBar> bar,
    ffi.Pointer<ffi.Int8> title,
  ) {
    return _gtk_header_bar_set_title(
      bar,
      title,
    );
  }

  late final _gtk_header_bar_set_titlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<_GtkHeaderBar>,
              ffi.Pointer<ffi.Int8>)>>('gtk_header_bar_set_title');
  late final _gtk_header_bar_set_title =
      _gtk_header_bar_set_titlePtr.asFunction<
          void Function(ffi.Pointer<_GtkHeaderBar>, ffi.Pointer<ffi.Int8>)>();
}

class _GApplication extends ffi.Struct {
  external _GObject parent_instance;

  external ffi.Pointer<_GApplicationPrivate> priv;
}

/// GObject:
///
/// The base object type.
///
/// All the fields in the `GObject` structure are private to the implementation
/// and should never be accessed directly.
///
/// Since GLib 2.72, all #GObjects are guaranteed to be aligned to at least the
/// alignment of the largest basic GLib type (typically this is #guint64 or
/// #gdouble). If you need larger alignment for an element in a #GObject, you
/// should allocate it on the heap (aligned), or arrange for your #GObject to be
/// appropriately padded. This guarantee applies to the #GObject (or derived)
/// struct, the #GObjectClass (or derived) struct, and any private data allocated
/// by G_ADD_PRIVATE().
class _GObject extends ffi.Struct {
  external _GTypeInstance g_type_instance;

  @ffi.Uint32()
  external int ref_count;

  external ffi.Pointer<_GData> qdata;
}

/// GTypeInstance:
///
/// An opaque structure used as the base of all type instances.
class _GTypeInstance extends ffi.Struct {
  external ffi.Pointer<_GTypeClass> g_class;
}

/// GTypeClass:
///
/// An opaque structure used as the base of all classes.
class _GTypeClass extends ffi.Struct {
  @ffi.Uint64()
  external int g_type;
}

class _GData extends ffi.Opaque {}

class _GApplicationPrivate extends ffi.Opaque {}

class _GtkWindow extends ffi.Struct {
  external _GtkBin bin;

  external ffi.Pointer<_GtkWindowPrivate> priv;
}

class _GtkBin extends ffi.Struct {
  external _GtkContainer container;

  external ffi.Pointer<_GtkBinPrivate> priv;
}

class _GtkContainer extends ffi.Struct {
  external _GtkWidget widget;

  external ffi.Pointer<_GtkContainerPrivate> priv;
}

class _GtkWidget extends ffi.Struct {
  external _GObject parent_instance;

  external ffi.Pointer<_GtkWidgetPrivate> priv;
}

class _GtkWidgetPrivate extends ffi.Opaque {}

class _GtkContainerPrivate extends ffi.Opaque {}

class _GtkBinPrivate extends ffi.Opaque {}

class _GtkWindowPrivate extends ffi.Opaque {}

class _GtkApplication extends ffi.Struct {
  external _GApplication parent;

  external ffi.Pointer<_GtkApplicationPrivate> priv;
}

class _GtkApplicationPrivate extends ffi.Opaque {}

class _GtkHeaderBar extends ffi.Struct {
  external _GtkContainer container;
}
